# -----------------------------------------------------
# 📄 1. ConfigMap — Automatically connects Grafana to Prometheus
# -----------------------------------------------------
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasource               # 📛 Name of the config
  namespace: monitoring                  # 📦 Belongs to "monitoring" namespace
data:
  datasource.yaml: |                     # 📄 This will be mounted as a config file in Grafana
    apiVersion: 1
    datasources:
      - name: Prometheus                 # 📊 Name of the datasource inside Grafana UI
        type: prometheus                 # 🔌 Datasource type is Prometheus
        access: proxy                    # 📡 Grafana will fetch metrics through proxy internally
        url: http://prometheus-service.monitoring.svc.cluster.local:9090
        # 🌐 This is the internal Kubernetes DNS name of your Prometheus service
        isDefault: true                  # ✅ Make this the default data source in Grafana

---
# -----------------------------------------------------
# 🚀 2. Deployment — Runs Grafana container inside Kubernetes
# -----------------------------------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana-deployment              # 📛 Name of this deployment
  namespace: monitoring                 # 📦 Same namespace as Prometheus
spec:
  replicas: 1                           # 👤 Run just one Grafana pod for now
  selector:
    matchLabels:
      app: grafana                      # 🔍 Selects the pod using this label

  template:
    metadata:
      labels:
        app: grafana                    # 🏷️ Pod will have this label
    spec:
      containers:
        - name: grafana                         # 🐳 Name of the container
          image: grafana/grafana:latest         # 📥 Pull Grafana image from Docker Hub
          ports:
            - containerPort: 3000               # 🚪 Port inside the container for Grafana UI

          volumeMounts:
            - name: grafana-storage
              mountPath: /var/lib/grafana       # 💾 Path to store dashboards and data
            - name: grafana-config
              mountPath: /etc/grafana/provisioning/datasources
              # 📁 This is where Grafana looks for datasource YAMLs

      volumes:
        - name: grafana-storage
          emptyDir: {}                   # 🗂️ Temporary in-memory storage (gone if pod restarts)
        - name: grafana-config
          configMap:
            name: grafana-datasource     # 🔗 Use the ConfigMap from above

---
# -----------------------------------------------------
# 🌐 3. Service — Exposes Grafana to your browser (NodePort)
# -----------------------------------------------------
apiVersion: v1
kind: Service
metadata:
  name: grafana-service                  # 📛 Name of the service
  namespace: monitoring                  # 📦 Must match the namespace of the deployment
spec:
  type: NodePort                         # 🌍 Expose Grafana on your host (Minikube style)
  selector:
    app: grafana                         # 🎯 Match the pod label
  ports:
    - port: 3000                         # 📡 Internal port inside Kubernetes cluster
      targetPort: 3000                   # 🎯 Same port Grafana listens on
      nodePort: 30009                    # 🌐 Access from browser: http://localhost:30009
